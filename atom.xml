<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kelvin&#39;s blog</title>
  
  <subtitle>Never stop leanring</subtitle>
  <link href="https://huiskelvin.github.io/atom.xml" rel="self"/>
  
  <link href="https://huiskelvin.github.io/"/>
  <updated>2021-08-29T11:19:20.341Z</updated>
  <id>https://huiskelvin.github.io/</id>
  
  <author>
    <name>HuIsKelvin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个 todo list 的小 demo</title>
    <link href="https://huiskelvin.github.io/2019/04/13/demo-todo-list/"/>
    <id>https://huiskelvin.github.io/2019/04/13/demo-todo-list/</id>
    <published>2019-04-13T15:14:20.000Z</published>
    <updated>2021-08-29T11:19:20.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="todo-list"><a href="#todo-list" class="headerlink" title="todo list"></a>todo list</h1><h2 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h2><ul><li>新增待做事项</li><li>删除待做事项</li><li>搜索，并在列表中高亮检索词</li></ul><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://s2.ax1x.com/2019/04/13/ALxjlq.jpg" alt="ALxjlq.jpg"></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><ul><li>Dom操作</li><li>Js事件监听</li></ul><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#app</span> <span class="selector-class">.app-title</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-transform</span>: capitalize;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        </span></span><br><span class="line"><span class="css">        <span class="selector-id">#add-to-do</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span><span class="selector-attr">[id=<span class="string">&quot;list&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#add-to-do</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span><span class="selector-attr">[id=<span class="string">&quot;list&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#list</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">2px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#list</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#e0e0e0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#list</span> <span class="selector-tag">span</span><span class="selector-attr">[class=<span class="string">&quot;del&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#list</span> <span class="selector-tag">span</span><span class="selector-attr">[class=<span class="string">&quot;hl&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;app-title&quot;</span>&gt;</span>to do list<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;add-to-do&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;add thing to do&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> add = <span class="built_in">document</span>.getElementById(<span class="string">&quot;add-to-do&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 存储待做事项</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> items = [];</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 新增待做事项</span></span></span><br><span class="line"><span class="javascript">            add.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    removeList();</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> val = add.value;</span></span><br><span class="line"><span class="javascript">                    items.push(val);</span></span><br><span class="line"><span class="javascript">                    showList(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    add.value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// input输入改变时，高亮</span></span></span><br><span class="line"><span class="javascript">            add.addEventListener(<span class="string">&quot;input&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                redrawList(add.value);</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            list.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 删除待做事项</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(e.target.className === <span class="string">&quot;del&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// var parent = e.target.parentNode;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// var index = (parent.id.split(&quot;-&quot;))[1];</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> index = (e.target.id.split(<span class="string">&quot;-&quot;</span>))[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">                    items.splice(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                    redrawList(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">redrawList</span>(<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                removeList();</span></span><br><span class="line"><span class="javascript">                showList(val);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">removeList</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;#list li&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> lis) &#123;</span></span><br><span class="line"><span class="javascript">                    list.removeChild(i);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">showList</span>(<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (items) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> text = items[i];</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 若需要匹配val</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(val) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(val, <span class="string">&#x27;g&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                            text = text.replace(reg, <span class="string">&quot;&lt;span class=&#x27;hl&#x27;&gt;&quot;</span> + val + <span class="string">&quot;&lt;/span&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// create li element</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> elemLi = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        elemLi.innerHTML = text + <span class="string">&quot;&lt;span id=&#x27;del-&quot;</span> + i+ <span class="string">&quot;&#x27; class=&#x27;del&#x27;&gt;x&lt;/span&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                        list.appendChild(elemLi);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Todo list</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CSS—div的高度填满剩余空间</title>
    <link href="https://huiskelvin.github.io/2019/04/04/div-fill-in-the-rest-zoom/"/>
    <id>https://huiskelvin.github.io/2019/04/04/div-fill-in-the-rest-zoom/</id>
    <published>2019-04-04T14:15:11.000Z</published>
    <updated>2021-08-29T11:19:20.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>使用CSS实现。<br>页面有上下两个部分，上部分定高，下部分填满窗口剩余的高度，不能出现纵向滚动条。</p><p>示例：<br><a href="https://imgchr.com/i/ARmKG6"><img src="https://s2.ax1x.com/2019/04/04/ARmKG6.jpg" alt="ARmKG6.jpg"></a><br>（只是为了看的直观，没考虑配色美观）</p><p>HTML结构如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 上面的部分 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>nav<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 剩余部分 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用float"><a href="#使用float" class="headerlink" title="使用float"></a>使用float</h2><p>将 <code>#nav</code> 设置为 <code>float: left;</code>，再让 <code>#content</code> 的宽度为 100%。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/* 一定要设置这个 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#4B5ED7</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e0e0e0</span>;</span><br><span class="line">  <span class="comment">/* width 不设置100%，也是横铺满的 */</span></span><br><span class="line">  <span class="comment">/* width: 100%; */</span> </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用absolute，再限定top和bottom"><a href="#使用absolute，再限定top和bottom" class="headerlink" title="使用absolute，再限定top和bottom"></a>使用absolute，再限定top和bottom</h2><p>使用 <code>position: absolute;</code>，再配合<code>top</code>和<code>bottom</code>，来强制定义盒模型的区域。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#4B5ED7</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e0e0e0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="comment">/* 距顶部距离就是 #nav 的 height */</span></span><br><span class="line">  <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用flex"><a href="#使用flex" class="headerlink" title="使用flex"></a>使用flex</h2><p>使用 <code>position: flex;</code>，主轴设置为纵向。<br><code>flex-grow</code> 用来指定父容器多余空间的分配比率。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/* 一定要设置这个height */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="comment">/* 一定要设置这个height */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#4B5ED7</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e0e0e0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用calc-和-vh"><a href="#使用calc-和-vh" class="headerlink" title="使用calc()和 vh"></a>使用calc()和 vh</h2><p><code>calc()</code> 函数是<code>CSS</code>中用于动态计算长度值。<br><code>vh</code> 是相对于视口的高度，视口被均分为100单位，一个单位为<code>1vh</code>。<br>两个都是CSS3的属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#4B5ED7</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e0e0e0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">40px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">用CSS实现div的高度填满剩余空间</summary>
    
    
    
    
    <category term="CSS" scheme="https://huiskelvin.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Duplicate repetitive elements in array</title>
    <link href="https://huiskelvin.github.io/2019/04/03/duplicate-repetitive-elements-in-array/"/>
    <id>https://huiskelvin.github.io/2019/04/03/duplicate-repetitive-elements-in-array/</id>
    <published>2019-04-03T14:36:13.000Z</published>
    <updated>2021-08-29T11:19:20.342Z</updated>
    
    <content type="html"><![CDATA[<p>去除数组中重复元素</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>去除数组中重复元素，并得到被删除元素的数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input:</span><br><span class="line">[1, 2, 1, 5, 2, 6, 1]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output:</span><br><span class="line">[1, 2, 1]</span><br><span class="line"></span><br><span class="line">// 被删除的数组中有重复值</span><br></pre></td></tr></table></figure><h1 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 被删除元素的数组</span></span><br><span class="line"><span class="keyword">var</span> removed = [];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">e, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr.indexOf(e) !== index) &#123;</span><br><span class="line">    arr.splice(index, <span class="number">1</span>);</span><br><span class="line">    removed.push(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;去除数组中重复元素&lt;/p&gt;
&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;去除数组中重复元素，并得到被删除元素的数组。&lt;/p&gt;
&lt;figure class=&quot;highlight p</summary>
      
    
    
    
    
    <category term="算法" scheme="https://huiskelvin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C++ —函数</title>
    <link href="https://huiskelvin.github.io/2019/04/01/cplusplus-2-function/"/>
    <id>https://huiskelvin.github.io/2019/04/01/cplusplus-2-function/</id>
    <published>2019-04-01T07:30:25.000Z</published>
    <updated>2021-08-29T11:19:20.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h1><p>每个 C++ 程序都至少有一个函数，即主函数<code>main()</code>。</p><p><strong>函数定义</strong>（function definition）即函数本身，由<strong>函数首部</strong>（function heading）和<strong>函数体</strong>（Function body）组成</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名（形式参数列表）  <span class="comment">// 函数首部</span></span><br><span class="line">&#123;</span><br><span class="line">  C++语句                       <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myFunction</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result = x + y;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="返回值类型"><a href="#返回值类型" class="headerlink" title="返回值类型"></a>返回值类型</h2><p>分为两种。</p><p><strong>无返回值函数</strong>，返回值类型为<code>void</code>；</p><p><strong>带返回值函数</strong>， 函数体中必有<code>return语句</code>，返回值类型为<code>return</code>后表达式的值的类型。</p><h2 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h2><p>除了<code>main</code>函数，其他所有函数名都是用户自定义的标识符。</p><h2 id="形式参数表"><a href="#形式参数表" class="headerlink" title="形式参数表"></a>形式参数表</h2><p>函数可以有形式参数表，也可以没有。<strong>形式参数肯定是变量。</strong></p><h2 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h2><p>是函数的实现部分，由<code>&#123;&#125;</code>和<code>c++</code>语句组成。</p><p>对于<strong>带返回值函数</strong>， 函数体中必有<code>return语句</code>。对于<strong>无返回值函数</strong>，函数体没有<code>return</code>语句，或者有<code>return;</code>；</p><blockquote><p>若return 后面的表达式类型与函数首部指定的返回值类型不同，则进行隐式类型转换。</p></blockquote><h1 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h1><p>除了main函数，其他所有函数名都是用户自定义的标识符。<br>在c++中，所有标识符都应“先声明再使用”，否则编译器无法识别，从而无法继续编译。<br><strong>函数原型的作用</strong>就是为编译器提供相关函数的信息，令编译器在编译后面的函数调用语句时可以成功。</p><p>函数原型与函数头部相似。</p><p>函数原型的格式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名(形参<span class="number">1</span>数据类型, 形参<span class="number">2</span>数据类型, ...);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getName</span><span class="params">()</span></span>;              <span class="comment">// 无形参的函数原型</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">mulSqrt</span><span class="params">( <span class="keyword">int</span> , <span class="keyword">int</span> )</span></span>;  <span class="comment">// 无形参名</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">mulSqrt</span><span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;  <span class="comment">// 有形参名</span></span><br></pre></td></tr></table></figure><p>函数原型一般放在<strong>程序开头</strong>，起全局作用。其后的函数定义和函数调用的顺序先后，不会影响编译。</p><p>若函数定义在函数调用之前，则可以省略函数原型。</p><p>函数原型也称为，函数声明。</p><h1 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h1><p>实际上，程序中各个函数定义的位置可以按任意顺序排列。<br>编译时，编译器按照位置上的前后顺序进行编译。<br>但在执行时，整个控制流程总是从 <code>main</code> 函数的第一条语句开始，按逻辑顺序往下执行。当遇到函数调用时，控制权就进入被调用函数的第一条语句，按逻辑顺序往下执行，直到最后一条语句，然后控制权就返回到函数调用后的语句上。</p><p>一般来说，整个程序的执行从 <code>main</code> 函数开始，也在 <code>main</code> 函数中结束。</p><blockquote><p>在C++程序中，main函数与一般函数的不同在于：<br>一般函数都是被别的函数调用，而main函数是被操作系统调用。这是因为任何用户程序都在操作系统的管理下运行，因此main函数中的返回值是返回给操作系统的。</p></blockquote><p>从程序员角度， <code>main</code> 函数中一般用 <code>return 0;</code> 表示程序顺利完成预定任务；而用 <code>return 1;</code> 表示程序由于遇到了某种情况而没有顺利完成任务。</p><p>函数调用的语法形式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">函数名（实参列表）</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 有形参时 ---</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;    <span class="comment">// 函数首部</span></span><br><span class="line"><span class="built_in">sqrt</span>(x1, x2);                 <span class="comment">// 函数调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 无形参时 ---</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printLine</span><span class="params">()</span></span>;     <span class="comment">// 函数首部</span></span><br><span class="line"><span class="built_in">printLine</span>();          <span class="comment">// 函数调用</span></span><br></pre></td></tr></table></figure><h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><p>在C++中，形参分为<strong>值形参</strong>（value parameter）和<strong>引用形参</strong>（reference parameter）。<br>声明形参时，在数据类型后加<code>&amp;</code>，则这个形参时引用形参；否则为值形参。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">( <span class="keyword">int</span>&amp; param1,    <span class="comment">// param1 是引用形参</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> param2)</span></span>;    <span class="comment">// param1 是值形参</span></span><br></pre></td></tr></table></figure><h2 id="值形参"><a href="#值形参" class="headerlink" title="值形参"></a>值形参</h2><p>值形参接受实参的值，其对应的实参可以是任何具有值得项目，如常量、变量和表达式。</p><ol><li>实参的数据类型，应与相应位置形参数据类型一致，否则隐式类型转换。</li><li>值形参时，实参与其对应的形参是两个不同的数据项。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main&#123;</span><br><span class="line">  <span class="keyword">int</span> x1, x2, result;</span><br><span class="line">  result = <span class="built_in">add</span>(x1, x2);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>main函数中的实参 x1 与 add 函数中的 x 是不同的数据项，两者占据不同内存块。<br>在函数调用时，x1 的值传递给 x， <strong>然后两者就没关系了</strong>。</li><li>判断两个变量是否为同一变量，是看它们是否对应同一块内存。</li></ol><h2 id="引用形参"><a href="#引用形参" class="headerlink" title="引用形参"></a>引用形参</h2><p>引用形参接收的是实参变量的地址空间，则<strong>引用形参与实参是同一变量</strong>。</p><p><strong>引用形参所对应的实参一定是变量</strong>。因为引用形参本身是一个变量，而实参与它对应同一内存块，因此也一定是一个变量。</p><p>对于引用形参，函数原型中一定注意有 <code>&amp;</code> 这个符号，否则会编译错误。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">refPara</span><span class="params">(<span class="keyword">int</span>&amp;)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="标识符作用域"><a href="#标识符作用域" class="headerlink" title="标识符作用域"></a>标识符作用域</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>某标识符的<strong>作用域</strong>（scope）就是：在程序代码中可合法引用（使用）该标识符的区域。</p><h3 id="局部作用域（local-scope）"><a href="#局部作用域（local-scope）" class="headerlink" title="局部作用域（local scope）"></a>局部作用域（local scope）</h3><p>在块<code>&#123;&#125;</code>中声明的标识符，起作用域就是从声明处到该块结尾。</p><h3 id="全局作用域（global-scope）"><a href="#全局作用域（global-scope）" class="headerlink" title="全局作用域（global scope）"></a>全局作用域（global scope）</h3><p>在所有块（包括函数、类和控制结构中的块）以外声明的标识符，其作用域是从声明处到文件结尾。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> PI = <span class="number">3.14</span>;    <span class="comment">// 全局常量</span></span><br><span class="line"><span class="keyword">int</span> radius = <span class="number">5</span>;           <span class="comment">// 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="变量的生命期"><a href="#变量的生命期" class="headerlink" title="变量的生命期"></a>变量的生命期</h1><p>变量的<strong>生命期</strong>（lifetime）就是：在程序执行过程中，变量实际占据内存空间的时间段。</p><p>从生命期角度来看，C++的变量分为具有<strong>局部生命期</strong>的变量和具有<strong>全局生命期</strong>的变量。</p><p>变量声明的形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[存储类型] 数据类型 变量名 [= 初值]</span><br><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="keyword">static</span> PI = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">float</span> radius = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure><p>变量的存储类型：<br>| 标识符          | 意义                    |<br>| ———— | ——————— |<br>| auto         | 在动态存储区分配存储单元          |<br>| register     | 在CPU的寄存器中分配存储单元。      |<br>| static       | 在静态存储区分配存储单元。         |<br>| extern       | 声明外部变量。               |<br>| mutable      | 仅适用于类的对象，允许对象的成员替代常量。 |<br>| thread_local | 变量仅可在它在其上创建的线程上访问     |</p><ul><li>auto 和 register 只能用于局部变量。</li><li>auto，register 和 static 只能用于变量的定义（即定义性声明）。</li><li>extern 既可以用于变量的定义性声明，又可用于变量的引用性声明，被声明的变量称为<strong>外部变量</strong>（extern variable）。</li></ul><h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><p>自 C++ 11 以来，<strong>auto</strong> 关键字用于两种情况：声明变量时根据初始化表达式自动推断该变量的类型、声明函数时函数返回值的占位符。</p><p>C++98标准中auto关键字用于自动变量的声明，但由于使用极少且多余，在C++11中已删除这一用法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> f=<span class="number">3.14</span>;      <span class="comment">//double</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">s</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;  <span class="comment">//const char*</span></span><br><span class="line"><span class="keyword">auto</span> z = <span class="keyword">new</span> <span class="built_in"><span class="keyword">auto</span></span>(<span class="number">9</span>); <span class="comment">// int*</span></span><br><span class="line"><span class="keyword">auto</span> x1 = <span class="number">5</span>, x2 = <span class="number">5.0</span>, x3=<span class="string">&#x27;r&#x27;</span>;<span class="comment">//错误，必须是初始化为同一类型</span></span><br></pre></td></tr></table></figure><h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><p>register 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。</p><p>较少用。</p><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>通常，声明时未加上 static 修饰符的局部变量具有局部生命期，称为<strong>自动变量</strong>。自动变量在进入声明该变量的块时被创建，在离开该块时被撤销。若多次进入和离开该块，则自动变量会多次被创建和撤销。</p><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>在程序运行期间，静态变量只进行一次初始化。静态变量的初始化在执行 main 函数之前。</p><p>静态变量具有全局生命期，在程序开始执行时创建，在程序运行结束时撤销，其生命期与程序执行时间等长。</p><h4 id="静态全局变量"><a href="#静态全局变量" class="headerlink" title="静态全局变量"></a>静态全局变量</h4><p>在声明时，在全局变量前加上<code>static</code>。</p><blockquote><p>全局变量本身有全局生命期，因此定义全局变量时加 static 的作用是：限制该全局变量不会被别的文件引用。</p></blockquote><blockquote><p>不提倡使用全局变量，因此静态全局变量用的不多。</p></blockquote><h4 id="静态局部变量"><a href="#静态局部变量" class="headerlink" title="静态局部变量"></a>静态局部变量</h4><p>在声明时，在局部变量前加上<code>static</code>。</p><blockquote><p>局部静态变量是局部变量。虽然该变量具有全局变量生命期，但是在其作用域之外是无法访问它的。</p></blockquote><h2 id="extern"><a href="#extern" class="headerlink" title="extern"></a>extern</h2><p>。。。</p><h3 id="外部变量"><a href="#外部变量" class="headerlink" title="外部变量"></a>外部变量</h3><p>定义性声明：带初始化表达式的外部变量声明；引用性声明：不带初始化表达式~。</p><blockquote><p>局部变量默认为 auto（旧版），全局变量默认为 extern。</p></blockquote><h1 id="预处理指示"><a href="#预处理指示" class="headerlink" title="预处理指示"></a>预处理指示</h1><p>。。。</p><h1 id="函数的接口设计和注释"><a href="#函数的接口设计和注释" class="headerlink" title="函数的接口设计和注释"></a>函数的接口设计和注释</h1><p>。。。</p><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>递归的特点：</p><ul><li>有两个过程组成：追溯和回归。</li><li>其每一步的计算方案可用这个方案的一个更小版本或其基本条件来实现。</li></ul><blockquote><p>正确的递归程序必须是可终止的！<br>递归程序必须至少有一个基本条件，来确保它们最终会达到某个基本分支。</p></blockquote><p>例子，计算 x 的 k 次方。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用递归方式求 x 的 k 次方</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数原型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 基, 幂次和结果</span></span><br><span class="line">  <span class="keyword">int</span> base, exp, result;</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;enter the base and the exponent&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cin &gt;&gt; base &gt;&gt; exp;</span><br><span class="line"></span><br><span class="line">  result = <span class="built_in">power</span>(base, exp);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 终止条件</span></span><br><span class="line">  <span class="keyword">if</span>(k == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 计算 x 的 k-1 次方</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="built_in">power</span>(x, k<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">C++ 函数</summary>
    
    
    
    
    <category term="C++" scheme="https://huiskelvin.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ —入门基础</title>
    <link href="https://huiskelvin.github.io/2019/04/01/cplusplus-1-base-knowledge/"/>
    <id>https://huiskelvin.github.io/2019/04/01/cplusplus-1-base-knowledge/</id>
    <published>2019-04-01T07:14:05.000Z</published>
    <updated>2021-08-29T11:19:20.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>待更新！</p><h1 id="语句与基本控制结构"><a href="#语句与基本控制结构" class="headerlink" title="语句与基本控制结构"></a>语句与基本控制结构</h1><p>待更新！</p>]]></content>
    
    
    <summary type="html">C++入门</summary>
    
    
    
    
    <category term="C++" scheme="https://huiskelvin.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>CSS-鼠标hover某元素，控制另一个元素显示</title>
    <link href="https://huiskelvin.github.io/2019/03/30/hover-item-show-another-item/"/>
    <id>https://huiskelvin.github.io/2019/03/30/hover-item-show-another-item/</id>
    <published>2019-03-30T02:36:27.000Z</published>
    <updated>2021-08-29T11:19:20.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>页面上有一个元素A，和另一个元素B。当鼠标悬浮在元素A上时，元素B同时显示。</p><p>例子：<br><a href="https://imgchr.com/i/ABoRxK"><img src="https://s2.ax1x.com/2019/03/30/ABoRxK.md.gif" alt="ABoRxK.md.gif"></a></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>例子页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-a&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-b&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>B<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e0e0e0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.box-a</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#aaa</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.box-b</span> &#123;</span><br><span class="line">  <span class="comment">/* 默认不显示 */</span></span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 左边距离即 box-a 的width */</span></span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CSS实现"><a href="#CSS实现" class="headerlink" title="CSS实现"></a>CSS实现</h2><p>使用CSS的伪类和选择器来实现。</p><p>将元素B作元素A的兄弟元素或子元素，用元素A的hover状态作选择器的限制部分，控制元素B的<code>display: block;</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在 style 中加入这一个 */</span></span><br><span class="line"><span class="selector-class">.box-a</span><span class="selector-pseudo">:hover</span> ~ <span class="selector-class">.box-b</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Javascript事件监听来实现"><a href="#Javascript事件监听来实现" class="headerlink" title="Javascript事件监听来实现"></a>Javascript事件监听来实现</h2><p>通过元素A监听事件 <code>mouseover</code> 和 <code>mouseout</code>，来控制元素B的显示和隐藏。</p><p>但这种办法稍显麻烦，每次都要监听两个事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boxA = (<span class="built_in">document</span>.getElementByClassName(<span class="string">&quot;box-a&quot;</span>))[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> boxB = (<span class="built_in">document</span>.getElementByClassName(<span class="string">&quot;box-b&quot;</span>))[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当鼠标移入元素A时</span></span><br><span class="line">boxA.addEventListener(<span class="string">&quot;mouseover&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  boxB.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 当鼠标移出元素A时</span></span><br><span class="line">boxA.addEventListener(<span class="string">&quot;mouseout&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  boxB.style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><a href="https://imgchr.com/i/AB754A"><img src="https://s2.ax1x.com/2019/03/30/AB754A.md.gif" alt="AB754A.md.gif"></a></p>]]></content>
    
    
    <summary type="html">hover一个元素，另一个元素也显示</summary>
    
    
    
    
    <category term="CSS" scheme="https://huiskelvin.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-简介</title>
    <link href="https://huiskelvin.github.io/2019/03/24/javascript-1-introduction/"/>
    <id>https://huiskelvin.github.io/2019/03/24/javascript-1-introduction/</id>
    <published>2019-03-24T11:50:37.000Z</published>
    <updated>2021-08-29T11:19:20.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javascript-简史"><a href="#Javascript-简史" class="headerlink" title="Javascript 简史"></a>Javascript 简史</h1><p>早期的网页，表单验证必须把表单数据发送到服务器端，才能确定用户是否没有填写某个必填域，是否输入了无效的值。当年的网速很慢，为完成简单的表单验证而频繁地与服务器交换数据，只会加重用户的负担。</p><p>由此诞生了JavaScript，它主要目的是处理以前由服务器端语言（如 Perl）负责的一些输入验证操作。JavaScript的最初名字叫 LiveScript，Netscape 公司为了搭上媒体热炒Java的顺风车，临时把 LiveScript 改名为 JavaScript。</p><h1 id="Javascript-实现"><a href="#Javascript-实现" class="headerlink" title="Javascript 实现"></a>Javascript 实现</h1><p>虽然 JavaScript 和 ECMAScript 通常都被人们用来表达相同的含义，但 JavaScript 的含义却比 ECMA-262 中规定的要多得多。</p><p>一个完整的 Javascript 由以下<strong>三部分组成</strong>：</p><ul><li>核心(ECMAScript)</li><li>文档对象模型(DOM)</li><li>浏览器对象模型(BOM)</li></ul><h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><p>由 ECMA-262 定义的ECMAScript与 Web浏览器没有依赖关系。ECMA-262 定义的只是这门语言的基础，而在此基础之上可以构建更完善的脚本语言。我们常见的 Web 浏览器只是 ECMAScript 实现可能的<strong>宿主环境之一</strong>，其他宿主环境包括 Node（一种服务端 JavaScript平台）和 Adobe Flash。</p><p>宿主环境不仅提供基本的 ECMAScript 实现，同时也会提供该语言的扩展，以便语言与环境之间对接交互。而这些扩展——如 DOM，则利用 ECMAScript的核心类型和语法提供更多更具体的功能，以便实现针对环境的操作。</p><p>ECMA-262 标准规定了这门语言的下列组成部分：</p><ul><li>语法 </li><li>类型 </li><li>语句 </li><li>关键字 </li><li>保留字 </li><li>操作符 </li><li>对象</li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>文档对象模型（DOM，Document Object Model）DOM把整个页面映射为一个多层节点结构。HTML 或 XML 页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据。</p><p>通过 DOM 创建的这个表示文档的树形图，开发人员获得了控制页面内容和结构的主动权。借助 DOM 提供的 API，开发人员可以轻松自如地删除、添加、替换或修改任何节点。</p><p>一个简单的 HTML 页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该 HTML 页面对应的 DOM 树：<br><img src="https://s2.ax1x.com/2019/02/16/krjmFI.jpg" alt="DOM 树"></p><blockquote><p>DOM并不只是针对 JavaScript的，很多别的语言也都实现了DOM。<br>不过，在 Web 浏览器中，基于 ECMAScript 实现的 DOM 的确已经成为 JavaScript 这 门语言的一个重要组成部分。</p></blockquote><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>开发人员使用BOM（BOM，Browser Object Model）可以控制浏览器显示的页面以外的部分。</p><p>而BOM真正与众不同的地方（也是经常会导致问题的地方），还是它作为 JavaScript 实现的一部分但却没有相关的标准。这个问题在 HTML5 中得到了解决，HTML5 致力于把很多 BOM 功能写入正式规范。有了 HTML5，BOM 实现的细节有望朝着兼容性越来越高的方向发展。</p><p>从根本上讲，BOM只处理浏览器窗口和框架；但人们习惯上也把所有针对浏览器的 JavaScript 扩展算作 BOM 的一部分。下面就是一些这样的扩展： </p><ul><li>弹出新浏览器窗口的功能</li><li>移动、缩放和关闭浏览器窗口的功能</li><li>提供浏览器详细信息的 navigator 对象</li><li>提供浏览器所加载页面的详细信息的 location 对象</li><li>提供用户显示器分辨率详细信息的 screen 对象</li><li>对 cookies 的支持</li><li>像 XMLHttpRequest 和 IE 的 ActiveXObject 这样的自定义对象。</li></ul><hr/><p>参考资料：</p><ul><li>《JavaScript 高级程序设计》</li></ul>]]></content>
    
    
    <summary type="html">JavaScript概要</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://huiskelvin.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用Vue开发项目中遇到的坑</title>
    <link href="https://huiskelvin.github.io/2019/03/08/problems-in-using-Vue/"/>
    <id>https://huiskelvin.github.io/2019/03/08/problems-in-using-Vue/</id>
    <published>2019-03-08T00:06:09.000Z</published>
    <updated>2021-08-29T11:19:20.345Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用 Vue-cli 3 开发项目，于是记录下开发过程中遇到的坑。便于下次遇到相同坑时，能快速找到解决方法。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="npm-run-build-后，部署网页到服务器，出现404错误"><a href="#npm-run-build-后，部署网页到服务器，出现404错误" class="headerlink" title="npm run build 后，部署网页到服务器，出现404错误"></a>npm run build 后，部署网页到服务器，出现404错误</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>因为 vue-cli-3 默认打包后的项目放在域名的根目录，使用绝对路径来引用资源，则在index.html中引用资源的目录的<code>src</code>开头都为<code>&quot;/&quot;</code>.</p><p>vue-cli-3 官方文档在 <a href="https://cli.vuejs.org/zh/config/#publicpath">publicPath</a> 的说明：</p><blockquote><p>默认情况下，Vue CLI 会假设你的应用是被部署在一个域名的根路径上，例如 <code>https://www.my-app.com/</code>。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在 <code>https://www.my-app.com/my-app/</code>，则设置 publicPath 为 <code>/my-app/</code>。<br>这个值也可以被设置为空字符串 (‘’) 或是相对路径 (‘./‘)，这样所有的资源都会被链接为相对路径，这样打出来的包可以被部署在任意路径</p></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在 vue.config.js 中，修改以下语句，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 使用相对路径引用 js、css 等资源</span></span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&quot;./&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本地开发跨域问题"><a href="#本地开发跨域问题" class="headerlink" title="本地开发跨域问题"></a>本地开发跨域问题</h2><p>在本地开发请求后端服务器接口的时候，一般都需要跨域。如果用vue-cli3搭建的项目，可以在根目录的 <code>vue.config.js</code> 文件中，修改 <code>proxy</code> 或 <code>proxyTable</code> 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://yoururl.com&#x27;</span>,  <span class="comment">// 填入你实际的后端服务器接口</span></span><br><span class="line">                <span class="attr">ws</span>: <span class="literal">true</span>,  </span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在请求时，就会将 <code>/api/posts/1</code> 请求代理到 <code>http://yoururl.com/posts/1</code>。</p><h2 id="在360浏览器上，不能正常使用URLSearchParams"><a href="#在360浏览器上，不能正常使用URLSearchParams" class="headerlink" title="在360浏览器上，不能正常使用URLSearchParams"></a>在360浏览器上，不能正常使用URLSearchParams</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>开发的网页中，有一个检索框，输入检索词并按回车后，就会将检索词传回后端进行检索。然而在360浏览器中，按回车后没反应，报错显示<code>URLSearchParams() is not defined</code>.</p><p>输入检索词后，按回车就会调用<code>search_query()</code>方法。在<code>search_query()</code>方法中，会使用<code>URLSearchParams</code>处理query，然后用<code>axios</code>的<code>post()</code>发送，然后query传给后端，再跳转到检索结果页面。</p><h3 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h3><p><code>URLSearchParams</code>在特定浏览器（如360浏览器）中不被兼容。</p><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><p>在项目中安装 url-search-params-polyfill，在main.js中引入URLSearchParams 的类，之后可以按照正常操作使用 URLSearchParams。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i --save url-search-params-polyfill</span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">import &quot;url-search-params-polyfill&quot;</span><br></pre></td></tr></table></figure><h2 id="待更新…"><a href="#待更新…" class="headerlink" title="待更新…"></a>待更新…</h2>]]></content>
    
    
    <summary type="html">记录在使用Vue的过程中遇到的问题</summary>
    
    
    
    
    <category term="Vue" scheme="https://huiskelvin.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Apache —（一）在Win10上安装部署Apache Http Server</title>
    <link href="https://huiskelvin.github.io/2019/02/03/Apache-1-installization/"/>
    <id>https://huiskelvin.github.io/2019/02/03/Apache-1-installization/</id>
    <published>2019-02-03T03:30:18.000Z</published>
    <updated>2021-08-29T11:19:20.338Z</updated>
    
    <content type="html"><![CDATA[<p>在 Windows10 上安装配置 <a href="http://httpd.apache.org/download.cgi">Apache服务器</a>。<br>因为最近做的项目放在云服务器（linux），到时用 <a href="https://cn.vuejs.org/">Vue</a> 写的前端要部署在服务器的apache上，就想先在自己电脑上玩一玩apache。</p><h2 id="下载-Apache"><a href="#下载-Apache" class="headerlink" title="下载 Apache"></a>下载 Apache</h2><p>到官网下载页面 <a href="http://httpd.apache.org/download.cgi">http://httpd.apache.org/download.cgi</a> 下载安装包.</p><p>点下图红框处，下载windows的版本。<br><a href="https://s2.ax1x.com/2019/02/03/kGueqH.png"><img src="https://s2.ax1x.com/2019/02/03/kGueqH.png" alt="kGueqH.png"></a></p><p>下图的大致意思是apache本身不提供已编译的安装包，只提供源码，如果你自己无法编译，可以选择下面这些官方推荐的第三方提供编译的网站。其中后两个是有名的wamp以及xampp集成环境，如果只想下载apache可以选择前三个网站。<br>这里我下载第一种。<br><a href="https://s2.ax1x.com/2019/02/03/kGulJP.png"><img src="https://s2.ax1x.com/2019/02/03/kGulJP.png" alt="kGulJP.png"></a></p><p>然后根据自己电脑选择32位版本还是64位版本。</p><h2 id="安装-Apache"><a href="#安装-Apache" class="headerlink" title="安装 Apache"></a>安装 Apache</h2><p>解压压缩包</p><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2>]]></content>
    
    
    <summary type="html">Apache 简单尝试，下载安装</summary>
    
    
    
    
    <category term="服务器" scheme="https://huiskelvin.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="Apache" scheme="https://huiskelvin.github.io/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>数据库—概述</title>
    <link href="https://huiskelvin.github.io/2019/01/13/Database-Introduction/"/>
    <id>https://huiskelvin.github.io/2019/01/13/Database-Introduction/</id>
    <published>2019-01-13T11:35:04.000Z</published>
    <updated>2021-08-29T11:19:20.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库系统概述"><a href="#数据库系统概述" class="headerlink" title="数据库系统概述"></a>数据库系统概述</h1><h2 id="数据库4个基本概念"><a href="#数据库4个基本概念" class="headerlink" title="数据库4个基本概念"></a>数据库4个基本概念</h2><ul><li>数据</li><li>数据库</li><li>数据库管理系统</li><li>数据库系统</li></ul><h3 id="数据（data）"><a href="#数据（data）" class="headerlink" title="数据（data）"></a>数据（data）</h3><p>数据（data）是数据库中存储的基本对象。<br>定义：描述事物的符号记录。<br>种类：数字、文字、图形、图像、音频、视频、学生的档案记录、订单情况等等。<br>数据的含义称为数据的语义， 数据与其语义是不可分的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如 93是一个数据</span><br><span class="line">语义1：学生某门课的成绩</span><br><span class="line">语义2：某人的体重</span><br><span class="line">语义3：计算机系2014级学生人数</span><br></pre></td></tr></table></figure><h3 id="数据库（DB）"><a href="#数据库（DB）" class="headerlink" title="数据库（DB）"></a>数据库（DB）</h3><p>数据库（Database，DB）：是长期储存在计算机内、 有组织的、 可共享的大量数据的集合。</p><p>为什么要建立数据库？<br>收集并抽取出一个应用所需要的大量数据， 将其保存， 以供进一步加工处理，抽取有用信息， 转换为有价值的知识。</p><p>数据库的基本特征：</p><ul><li>数据按一定的数据模型组织、 描述和储存</li><li>可为各种用户共享、冗余度较小、易扩展</li><li>数据独立性较高</li></ul><h3 id="数据库管理系统（DBMS）"><a href="#数据库管理系统（DBMS）" class="headerlink" title="数据库管理系统（DBMS）"></a>数据库管理系统（DBMS）</h3><p>什么是数据库管理系统（DBMS）：</p><ul><li>位于用户应用与操作系统之间的一层数据管理软件。</li><li>是基础软件，是一个大型复杂的软件系统。</li></ul><p>数据库管理系统的用途：<br>科学地组织和存储数据、 高效地获取和维护数据</p><p>主要功能：</p><ul><li>数据定义功能</li><li>数据组织、存储和管理</li><li>数据操纵功能</li><li>数据库的事务管理和运行管理</li><li>数据库的建立和维护功能</li></ul><h3 id="数据库系统（DBS）"><a href="#数据库系统（DBS）" class="headerlink" title="数据库系统（DBS）"></a>数据库系统（DBS）</h3><p>数据库系统（Database System， 简称DBS）</p><ul><li>是指在计算机系统中引入数据库后的系统构成。</li><li>在不引起混淆的情况下常常把数据库系统简称为数据库。</li></ul><p>数据库系统的构成</p><ul><li>数据库</li><li>数据库管理系统（及其应用开发工具）</li><li>应用程序</li><li>数据库管理员（DataBase Administrator， DBA）</li></ul><h2 id="数据库系统的特点"><a href="#数据库系统的特点" class="headerlink" title="数据库系统的特点"></a>数据库系统的特点</h2><ul><li>数据结构化</li><li>数据的共享性高，冗余度低且易扩充</li><li>数据独立性高</li><li>数据由数据库管理系统统一管理和控制</li></ul><h3 id="数据结构化"><a href="#数据结构化" class="headerlink" title="数据结构化"></a>数据结构化</h3><p><strong>数据的整体结构化</strong>是数据库的主要特征之一：</p><ul><li>不再仅仅针对某一个应用，而是面向整个企业或组织</li><li>不仅数据内部结构化，整体是结构化的，数据之间具有联系</li><li>数据记录可以变长</li><li>数据的最小存取单位是数据项</li></ul><p> 数据用<strong>数据模型</strong>描述， 无需应用程序定义。</p><h3 id="数据的共享性高，冗余度低且易扩充"><a href="#数据的共享性高，冗余度低且易扩充" class="headerlink" title="数据的共享性高，冗余度低且易扩充"></a>数据的共享性高，冗余度低且易扩充</h3><p>数据面向整个系统，可以被多个用户、多个应用共享使用。<br>数据共享的好处：</p><ul><li>减少数据冗余，节约存储空间</li><li>避免数据之间的不相容性与不一致性</li><li>使系统易于扩充</li></ul><h3 id="数据独立性高"><a href="#数据独立性高" class="headerlink" title="数据独立性高"></a>数据独立性高</h3><ul><li>物理独立性<br>指用户的应用程序与数据库中数据的物理存储是相互独立的。当数据的物理存储改变了，应用程序不用改变。</li><li>逻辑独立性<br>指用户的应用程序与数据库的逻辑结构是相互独立的。数据的逻辑结构改变了，应用程序不用改变。</li></ul><p>数据独立性由数据库管理系统的二级映像功能来保证。</p><h3 id="数据由数据库管理系统统一管理和控制"><a href="#数据由数据库管理系统统一管理和控制" class="headerlink" title="数据由数据库管理系统统一管理和控制"></a>数据由数据库管理系统统一管理和控制</h3><p>数据库管理系统提供的数据控制功能：</p><ul><li>数据的安全性（Security） 保护<br>保护数据以防止不合法的使用造成的数据的泄密和破坏。</li><li>数据的完整性（Integrity） 检查<br>保证数据的正确性、 有效性和相容性。</li><li>并发控制（Concurrency Control）<br>对多用户的并发操作加以控制和协调， 防止相互干扰而得到错误的结果。</li><li>数据库恢复（Recovery）<br>将数据库从错误状态恢复到某一已知的正确状态。</li></ul><h2 id="数据库用户"><a href="#数据库用户" class="headerlink" title="数据库用户"></a>数据库用户</h2><h3 id="最终用户"><a href="#最终用户" class="headerlink" title="最终用户"></a>最终用户</h3><p>交互式用户</p><h3 id="临时用户"><a href="#临时用户" class="headerlink" title="临时用户"></a>临时用户</h3><p>用SQL访问DBMS的用户。<br>交互式查询，也叫即席查询，是实现一些迫切需求时配制的查询。</p><h3 id="初级用户"><a href="#初级用户" class="headerlink" title="初级用户"></a>初级用户</h3><p>通过菜单访问的用户，而不必编写SQL语句。</p><h3 id="应用程序员"><a href="#应用程序员" class="headerlink" title="应用程序员"></a>应用程序员</h3><p>编写菜单程序的程序员</p><h3 id="数据库管理员（DBA）"><a href="#数据库管理员（DBA）" class="headerlink" title="数据库管理员（DBA）"></a>数据库管理员（DBA）</h3><p>管理DBMS的专家</p><hr><h1 id="数据库系统的结构"><a href="#数据库系统的结构" class="headerlink" title="数据库系统的结构"></a>数据库系统的结构</h1><p>从数据库应用开发人员角度看，数据库系统采用<strong>三级模式</strong>结构，是数据库系统内部的系统结构。<br><a href="https://imgse.com/i/5dtRUH"><img src="https://s1.ax2x.com/2019/01/13/5dtRUH.png" alt="5dtRUH.png"></a></p><h2 id="三级模式结构"><a href="#三级模式结构" class="headerlink" title="三级模式结构"></a>三级模式结构</h2><ul><li>模式 Schema</li><li>外模式 External Schema</li><li>内模式 Internal Schema</li></ul><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>也叫逻辑模式。是数据库中全体数据的逻辑结构和特征的描述。<br>所有用户的公共数据视图。</p><p>一般， 某个应用的数据库有一个模式。<br>模式是数据库系统模式结构的中心。</p><p>定义模式</p><ul><li>DDL定义数据的逻辑结构，以某种数据模型为基础<br>数据记录由哪些数据项构成，数据项的名字、类型、取值范围等</li><li>定义数据之间的联系</li><li>定义与数据有关的安全性、完整性要求</li></ul><h3 id="外模式"><a href="#外模式" class="headerlink" title="外模式"></a>外模式</h3><p>是数据库用户使用的<strong>局部</strong>数据的逻辑结构和特征的描述。<br>数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。</p><p>外模式与模式的关系</p><ul><li>外模式通常是模式的子集、 一个模式可以有多个外模式反映了不同的用户的应用需求、 看待数据的方式、 对数据保密的要求</li><li>对模式中某一数据， 在不同的外模式中 结构、 类型、 长度、 保密级别等都可以不同<br>外模式与应用的关系</li><li>一个外模式可以为<strong>多个</strong>应用系统所使用， 一个应用程序只能使用一个外模式<br>外模式的用途</li><li>每个用户只能看见和访问所对应的外模式中的数据， 简化用户视图</li><li>保证数据库安全性的一个有力措施</li></ul><h3 id="内模式"><a href="#内模式" class="headerlink" title="内模式"></a>内模式</h3><p>也称存储模式</p><ul><li>是数据物理结构和存储方式的描述</li><li>是数据在数据库内部的表示方式<ul><li>记录的存储方式<br>（例如， 顺序存储， 堆存储， Cluste按hash方法存储等）</li><li>索引的组织方式（B+树， Bitmap， Hash）</li><li>数据是否压缩存储</li><li>数据是否加密</li><li>数据存储记录结构的规定—如定长/变长， 记录是否可以跨页存放等</li></ul></li></ul><p>一个数据库只有<strong>一个内模式</strong>。</p><h2 id="数据库的二级映像（mapping）功能与数据独立性"><a href="#数据库的二级映像（mapping）功能与数据独立性" class="headerlink" title="数据库的二级映像（mapping）功能与数据独立性"></a>数据库的二级映像（mapping）功能与数据独立性</h2><p>数据库管理系统内部提供二级映像：</p><ul><li>外模式／模式映像</li><li>模式／内模式映像</li></ul><h3 id="外模式／模式映像"><a href="#外模式／模式映像" class="headerlink" title="外模式／模式映像"></a>外模式／模式映像</h3><p>对每一个外模式，有一个外模式／模式映像。<br>定义外模式与模式之间的对应关系。映像定义通常包含在各外模式的描述中。</p><p><strong>保证数据的逻辑独立性</strong></p><ul><li>当模式改变时，数据库管理员对外模式／模式映像作相应改变，使<strong>外模式保持不变</strong>。</li><li>应用程序是依据数据的外模式编写的， 应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的<strong>逻辑独立性</strong></li></ul><h3 id="模式／内模式映像"><a href="#模式／内模式映像" class="headerlink" title="模式／内模式映像"></a>模式／内模式映像</h3><p>定义了数据全局逻辑结构与存储结构之间的对应关系。如，说明某个逻辑记录对应何种存储结构。</p><p>数据库中模式／内模式映象是<strong>唯一</strong>的。该映象定义通常包含在模式描述中。</p><p><strong>保证数据的物理独立性</strong></p><ul><li>当数据库的存储结构改变了（例如选用了另一种存储结构），数据库管理员修改模式／内模式映象，使模式保持不变。</li><li>模式不变，则应用程序不变。保证了数据与程序的物理独立性， 简称数据的<strong>物理独立性</strong></li></ul><p>数据库的二级映像功能的作用：</p><ul><li>保证了应用程序的稳定性<br>除非应用需求本身发生变化，否则应用程序一般不需要修改。</li><li>从程序为中心——发展为<strong>以数据为中心</strong><br>具有了数据与程序之间的独立性，使得数据的定义和描述可以从应用程序中分离出去。</li><li>数据的存取由数据库管理系统管理<br>简化了应用程序的编制。大大减少了应用程序的维护和修改。</li></ul><hr><h1 id="数据库系统的组成"><a href="#数据库系统的组成" class="headerlink" title="数据库系统的组成"></a>数据库系统的组成</h1><p>从<strong>不同于前面4个概念的角度</strong>来说</p><ul><li>硬件平台及数据库</li><li>软件</li><li>人员</li></ul><h2 id="硬件平台及数据库"><a href="#硬件平台及数据库" class="headerlink" title="硬件平台及数据库"></a>硬件平台及数据库</h2><p>数据库系统对硬件资源的要求：</p><ul><li>足够大的内存；</li><li>足够的大的磁盘或磁盘阵列等外部设备；</li><li>较高的通道能力，提高数据传送率。</li></ul><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><ul><li><strong>数据库管理系统</strong></li><li>支持数据库管理系统运行的操作系统</li><li>与数据库接口的高级语言及其编译系统</li><li>以数据库管理系统为核心的<strong>应用开发工具</strong></li><li>为特定应用环境开发的<strong>数据库应用系统</strong></li></ul><h2 id="人员"><a href="#人员" class="headerlink" title="人员"></a>人员</h2><ul><li>数据库管理员（DBA）</li><li>系统分析员和数据库设计人员</li><li>应用程序员</li><li>最终用户</li></ul><h3 id="数据库管理员（DBA）-1"><a href="#数据库管理员（DBA）-1" class="headerlink" title="数据库管理员（DBA）"></a>数据库管理员（DBA）</h3><ul><li>参与确定数据库中的信息内容和结构</li><li>参与数据库的存储结构和存取策略的设计</li><li>参与确定数据安全性要求和完整性约束条件</li><li>监控数据库的使用和运行</li><li>数据库的改进和重组</li></ul><h3 id="系统分析员和数据库设计人员"><a href="#系统分析员和数据库设计人员" class="headerlink" title="系统分析员和数据库设计人员"></a>系统分析员和数据库设计人员</h3><p>系统分析员</p><ul><li>负责应用系统的需求分析和规范说明</li><li>与用户及数据库管理员结合，确定系统的硬软件配置</li><li>参与数据库系统的概要设计</li></ul><p>数据库设计人员</p><ul><li>参加用户需求调查和系统分析</li><li>确定数据库中的数据</li><li>设计数据库各级模式</li></ul><h3 id="应用程序员-1"><a href="#应用程序员-1" class="headerlink" title="应用程序员"></a>应用程序员</h3><ul><li>设计和编写应用系统的程序模块</li><li>进行调试和安装</li></ul><h3 id="最终用户-1"><a href="#最终用户-1" class="headerlink" title="最终用户"></a>最终用户</h3><p>用户是指最终用户（End User）。他们通过应用系统的用户接口使用数据库。</p><ol><li>偶然用户<ul><li>不经常访问数据库， 但每次访问数据库时往往需要不同的数据库信息</li><li>企业或组织机构的高中级管理人员</li></ul></li><li>简单用户<ul><li>主要工作是查询和更新数据库</li><li>银行的职员、 机票预定人员、 旅馆总台服务员</li></ul></li><li>复杂用户<ul><li>工程师、 科学家、 经济学家、 科技工作者等</li><li>直接使用数据库语言访问数据库， 甚至能够基于数据库管理系统的应用程序接口编制自己的应用程序</li></ul></li></ol><hr><h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><p>数据模型是对现实世界数据特征的抽象。通俗地讲数据模型就是现实世界的模拟。<br>数据模型是数据库系统的核心和基础。</p><h2 id="两大类数据模型"><a href="#两大类数据模型" class="headerlink" title="两大类数据模型"></a>两大类数据模型</h2><p>数据模型分为两类（两个不同的层次）</p><ul><li><strong>概念模型</strong>，也称信息模型<br>它是按用户的观点来对数据和信息建模，用于数据库设计。</li><li><strong>逻辑模型和物理模型</strong></li><li><ul><li>逻辑模型主要包括网状模型、层次模型、关系模型、面向对象数据模型、对象关系数据模型、半结构化数据模型等。<br>按计算机系统的观点对数据建模， 用于DBMS实现。</li></ul></li><li><ul><li>物理模型是对数据最底层的抽象<br>描述数据在系统内（磁盘上）的表示方式和存取方法。</li></ul></li></ul><h2 id="信息世界中的基本概念"><a href="#信息世界中的基本概念" class="headerlink" title="信息世界中的基本概念"></a>信息世界中的基本概念</h2><ul><li>实体（Entity）<br>客观存在并可相互区别的事物称为实体。<br>可以是具体的人、 事、 物或抽象的概念。</li><li>属性（Attribute）<br>实体所具有的某一特性称为属性。 一个实体可以由若干个属性来刻画。</li><li>码（Key）<br>唯一标识实体的属性集称为码。</li><li>实体型（Entity Type）<br>用实体名及其属性名集合来抽象和刻画同类实体称为实体型。</li><li>实体集（Entity Set）<br>同一类型实体的集合称为实体集。</li><li>联系（Relationship）<br>现实世界中事物内部以及事物之间的联系在信息世界中反映为实体（型）内部的联系和实体（型） 之间的联系。</li></ul><p>实体内部的联系: 是指组成实体的各属性之间的联系。<br>实体之间的联系: 通常是指不同实体集之间的联系。<br>实体之间的联系有<strong>一对一（1:1） 、 一对多（1:n） 和多对多（m:n）</strong>等多种类型。</p><p>概念模型的一种表示方法：实体-联系方法（Entity-Relationship Approach）。也称为<strong>E-R模型</strong>。</p><h2 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h2><p>数据模型是严格定义的一组概念的集合，精确地描述了系统的静态特性、动态特性和完整性约束条件(Integrity Constraints)。</p><p>数据模型由三部分组成：</p><ul><li>数据结构——描述系统的静态特性</li><li>数据操作——描述系统的动态特性</li><li>完整性约束</li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li>刻画数据模型性质的重要方面。<br>根据数据结构的类型来命名数据模型，层次结构-层次模型、 网状结构–网状模型、 关系结构—关系模型。</li><li>描述数据库的组成对象–对象的类型、 内容、 性质。</li><li>描述对象之间的联系。</li></ul><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><p>对数据库中各种对象的实例允许执行的操作的集合，包括操作及有关的操作规则。</p><p>数据操作的类型：</p><ul><li>查询</li><li>更新（插入、删除、修改）</li></ul><h3 id="数据的完整性约束"><a href="#数据的完整性约束" class="headerlink" title="数据的完整性约束"></a>数据的完整性约束</h3><p>是一组完整性规则的集合：</p><ul><li>完整性规则：给定的数据模型中数据及其联系所具有的<strong>制约和依存规则</strong>。</li><li>用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的<strong>正确、有效和相容</strong>。</li></ul><p>数据模型对完整性约束条件的定义：</p><ul><li>反映和规定必须遵守的<strong>基本的通用的</strong>完整性约束条件。</li><li>提供定义完整性约束条件的机制，以反映<strong>具体应用</strong>所涉及的数据必须遵守的<strong>特定的语义约束条件</strong>。（如课程数据库中成绩score不能超过100）</li></ul><h2 id="常用的数据模型"><a href="#常用的数据模型" class="headerlink" title="常用的数据模型"></a>常用的数据模型</h2><ul><li>层次模型（Hierarchical Model）</li><li>网状模型（Network Model）</li><li>关系模型（Relational Model)）</li><li>面向对象数据模型（Object Oriented Data Model）</li><li>对象关系数据模型（Object Relational Data Model）</li><li>半结构化数据模型（Semi-struture Data Model）—如XML</li><li>非结构化数据模型、图模型……</li></ul><h2 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h2><p>用树形结构来表示各类实体以及实体间的联系。</p><p>表示方法：</p><ul><li>实体型：用记录类型描述<br>每个结点表示一个记录类型（实体）</li><li>属性：用字段描述<br>每个记录类型可包含若干个字段</li><li>联系：用结点之间的连线表示记录类型（实体）之间的一对多的父子联系。<br>层次模型的定义：满足以下条件的基本层次结构的集合，</li><li>有且只有一个结点没有双亲结点， 这个结点称为根结点。</li><li>根以外的其它结点有且只有一个双亲结点。</li></ul><p><a href="https://imgse.com/i/5dtggN"><img src="https://s1.ax2x.com/2019/01/13/5dtggN.jpg" alt="5dtggN.jpg"></a></p><h2 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h2><p>采用网状结构来表示各类实体以及实体间的联系。<br>表示方法：（与层次数据模型相同）<br>网状模型的定义：满足下面两个条件的基本层次联系的集合：</p><ul><li> 允许一个以上的结点无双亲</li><li>一个结点可以有多于一个的双亲</li></ul><h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><h3 id="关系模型的数据结构"><a href="#关系模型的数据结构" class="headerlink" title="关系模型的数据结构"></a>关系模型的数据结构</h3><ul><li>关系（Relation） —— 一个关系对应通常说的一张表</li><li>元组（Tuple） —— 表中的一行即为一个元组</li><li>属性（ Attribute） ——表中的一列即为一个属性， 给每一个属性起一个名称即属性名</li><li>主码（Key） ——也称码键。 表中的某个属性组， 它可以唯一确定一个元组</li><li>域（Domain） ——是一组具有相同数据类型的值的集合。属性的取值范围来自某个域。<br>例：学生年龄属性的域（15～45岁），性别的域是（男， 女） ，<br>系名的域是一个学校所有系名的集合；</li><li>分量——元组中的一个属性值。</li><li>关系模式——对关系的描述<br>关系名（属性1，属性2， …，属性n）<br>学生（学号， 姓名，年龄，性别，系名，年级）</li></ul><p>关系必须是<strong>规范化</strong>的，满足一定的规范条件。<br>最基本的规范条件：关系的每一个分量必须是一个<strong>不可分</strong>的数据项， 不允许表中还有表。 </p><table><thead><tr><th align="center">关系术语</th><th align="center">一般表格的术语</th></tr></thead><tbody><tr><td align="center">关系名</td><td align="center">表名</td></tr><tr><td align="center">关系模式</td><td align="center">表头（表格的描述）</td></tr><tr><td align="center">关系</td><td align="center">（一张）二维表</td></tr><tr><td align="center">元组</td><td align="center">记录或行</td></tr><tr><td align="center">属性</td><td align="center">列</td></tr><tr><td align="center">属性名</td><td align="center">列名</td></tr><tr><td align="center">属性值</td><td align="center">列值</td></tr><tr><td align="center">分量</td><td align="center">一条记录中的一个列值</td></tr><tr><td align="center">非规范关系</td><td align="center">表中有表（大表中嵌有小表)</td></tr></tbody></table><h3 id="关系模型的操纵与完整性约束"><a href="#关系模型的操纵与完整性约束" class="headerlink" title="关系模型的操纵与完整性约束"></a>关系模型的操纵与完整性约束</h3><p>数据操作：操作对象和操作结果都是关系</p><ul><li>查询</li><li>插入</li><li>删除</li><li>更新</li></ul><p>关系的完整性约束条件：（前两个是关系的不变性）</p><ul><li>实体完整性</li><li>参照完整性</li><li>用户定义的完整性</li></ul>]]></content>
    
    
    <summary type="html">数据库基本概念</summary>
    
    
    
    
    <category term="数据库" scheme="https://huiskelvin.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>《HTML5与CSS3基础教程》笔记—定义选择器</title>
    <link href="https://huiskelvin.github.io/2019/01/12/HTML&amp;CSS-CSSSelector/"/>
    <id>https://huiskelvin.github.io/2019/01/12/HTML&amp;CSS-CSSSelector/</id>
    <published>2019-01-12T12:43:30.000Z</published>
    <updated>2021-08-29T11:19:20.339Z</updated>
    
    <content type="html"><![CDATA[<p>待更新…</p><h2 id="按类或ID选择元素"><a href="#按类或ID选择元素" class="headerlink" title="按类或ID选择元素"></a>按类或ID选择元素</h2><h2 id="按上下文选择元素"><a href="#按上下文选择元素" class="headerlink" title="按上下文选择元素"></a>按上下文选择元素</h2><p>在 CSS 中，可以根据元素的祖先、父元 素或同胞元素来定位它们。<br><strong>祖先</strong>（ancestor）是包含目标元素（<strong>后代</strong>，descendant）的任何元素，不管它们之间隔了多少代。（父元素是直接包含另一个元素的元素，它们之间只隔一代，被包含的元素称为子元素。）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里组合使用了类选择器和类型选择器。</span></span><br><span class="line"><span class="comment">.architect 和 p 之间的空格表示这个选择器会寻找任何作为 architect 类元素后代（无论是第几代）的 p 元素。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">architech <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">是任意 article 祖先的所有p元素，</span></span><br><span class="line"><span class="comment">这是三个中特殊性最低的一个</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">属于 architect 类 article 元素的祖先的任意p元素，</span></span><br><span class="line"><span class="comment">是三个中特殊性最高的一个</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-class">.architect</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按祖先元素选择要格式化的元素"><a href="#按祖先元素选择要格式化的元素" class="headerlink" title="按祖先元素选择要格式化的元素"></a>按祖先元素选择要格式化的元素</h3><ol><li>输入ancestor，这里的 ancestor 是希望格式化的元素的祖先元素的选择器。 </li><li>输入一个空格（必不可少）。 </li><li>如果需要，对后续的每个祖先元素重复第 (1) 步和第 (2) 步。 </li><li>输入descendant，这里的 descendant 是希望格式化的元素的选择器</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里 article 就是 ancestor，p 是 descendant。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们通常将基于元素祖先的选择器称为后代选择器，不过 CSS3 将其重新命名为后代结合符。</p></blockquote><h3 id="按父元素选择要格式化的元素"><a href="#按父元素选择要格式化的元素" class="headerlink" title="按父元素选择要格式化的元素"></a>按父元素选择要格式化的元素</h3><h3 id="按相邻同胞元素选择要格式化的元素"><a href="#按相邻同胞元素选择要格式化的元素" class="headerlink" title="按相邻同胞元素选择要格式化的元素"></a>按相邻同胞元素选择要格式化的元素</h3><h2 id="选择第一或最后一个子元素"><a href="#选择第一或最后一个子元素" class="headerlink" title="选择第一或最后一个子元素"></a>选择第一或最后一个子元素</h2><h2 id="选择元素的第一个字母或者第一行"><a href="#选择元素的第一个字母或者第一行" class="headerlink" title="选择元素的第一个字母或者第一行"></a>选择元素的第一个字母或者第一行</h2><blockquote><p><strong>伪元素、伪类及 CSS3 语法</strong><br>在 CSS3 中，:first-line 的语法为 ::first-line，:first-letter 的语法为 ::firstletter。注意，它们用两个冒号代替了单个冒号。这样修改的目的是将伪元素（有四个， 包 括 ::first-line、::first-letter、::before 和 ::after） 与 伪 类（ 如 :first-child、 :link、:hover 等）区分开。<br><strong>伪元素</strong>（pseudo-element）是 HTML 中并不存在的元素。例如，定义第一个字母或第一行文字时，并未在HTML中作相应的标记。它们是另一个元素（在本例中为 p 元素）的部分 内容。<br>相反，<strong>伪类</strong>（pseudo-class）则应用于一组 HTML 元素，而你无需在 HTML 代码中用类标记它们。例如，使用 :first-child 可以选择某元素的第一个子元素，你就不用写成 class=”first-child”。更多关于伪类的内容，请参见下一节。 </p></blockquote><blockquote><p>未来，::first-line 和 ::first-letter 这样的双冒号语法是推荐的方式，现代浏览器也支持它们。原始的单冒号语法则被废弃了，但浏览器出于向后兼容的目的，仍然支持它们。 不过，IE9 之前的 Internet Explorer 版本均不支持双冒号。因此，你可以选择继续使用单冒 号语法，除非你为 IE8 及以下版本设置了单独的</p></blockquote><h2 id="按状态选择链接元素"><a href="#按状态选择链接元素" class="headerlink" title="按状态选择链接元素"></a>按状态选择链接元素</h2><h2 id="按属性选择元素"><a href="#按属性选择元素" class="headerlink" title="按属性选择元素"></a>按属性选择元素</h2><h2 id="指定元素组"><a href="#指定元素组" class="headerlink" title="指定元素组"></a>指定元素组</h2><h2 id="组合使用选择器"><a href="#组合使用选择器" class="headerlink" title="组合使用选择器"></a>组合使用选择器</h2>]]></content>
    
    
    <summary type="html">CSS的选择器</summary>
    
    
    
    
    <category term="CSS" scheme="https://huiskelvin.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
